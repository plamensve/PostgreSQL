SELECT                                          ----> COUNT of Records
	COUNT(*)
FROM
	wizard_deposits

------------------------------------------------------------------------------------

SELECT                                        ----> Total Deposit Amount

	SUM(deposit_amount)
FROM
	wizard_deposits

-----------------------------------------------------------------------------------

SELECT                                      ----> AVG Magic Wand Size
	ROUND(AVG(magic_wand_size), 3)
FROM
	wizard_deposits

--------------------------------------------------------------------------------

SELECT                                      ----> MIN Deposit Charge
	MIN(deposit_charge)
FROM
	wizard_deposits

--------------------------------------------------------------------------------

SELECT                                      ----> MAX Age
	MAX(age)
FROM
	wizard_deposits

--------------------------------------------------------------------------------

SELECT                                          ----> GROUP BY Deposit Interest
	deposit_group,
	SUM(deposit_interest) AS deposit_interest
FROM
	wizard_deposits
GROUP BY deposit_group
ORDER BY deposit_interest DESC

--------------------------------------------------------------------------------

SELECT                                            ----> LIMIT the Magic Wand Creator
	magic_wand_creator,
	MIN(magic_wand_size) AS minimum_wand_size
FROM
	wizard_deposits
GROUP BY magic_wand_creator
ORDER BY minimum_wand_size ASC
LIMIT 5

--------------------------------------------------------------------------------

SELECT                                                ----> Mr. Bodrog is interested in the profitability of the bank and wants to know the average interest rates of all "deposit_groups" rounded down to the nearest integer. 
	deposit_group,                                     The query should categorize the deposits based on whether they have expired or not and retrieve data only for deposits that have a "deposit_start_date" after '1985-01-01'. 
	is_deposit_expired,                                                                                 The results should be sorted in descending order by "deposit_group" and ascending order by the "is_deposit_expired" flag.
	FLOOR(AVG(deposit_interest)) AS deposit_interest
FROM
	wizard_deposits
WHERE deposit_start_date > '1985-01-01'
GROUP BY deposit_group, is_deposit_expired
ORDER BY deposit_group DESC, is_deposit_expired

--------------------------------------------------------------------------------

SELECT							---->  Notes with Dumbledore
	last_name,
	COUNT(notes) AS notes_with_dumbledore
FROM
	wizard_deposits
WHERE
	notes LIKE '%Dumbledore%'
GROUP BY last_name

-----------------------------------------------------------------------------------------------------

CREATE VIEW view_wizard_deposits_with_expiration_date_before_1983_08_17			----> Wizard View
AS
SELECT
	CONCAT(first_name, ' ', last_name) AS wizard_name,
	deposit_start_date AS start_date,
	deposit_expiration_date AS expiration_date,
	deposit_amount AS amount
FROM
	wizard_deposits
WHERE deposit_expiration_date <= '1983-08-17'
GROUP BY wizard_name, start_date, expiration_date, amount
ORDER BY expiration_date ASC

-----------------------------------------------------------------------------------------------------

SELECT								----> Filter Max Deposit
	magic_wand_creator,
	MAX(deposit_amount) AS max_deposit_amount
FROM
	wizard_deposits
WHERE
	deposit_amount NOT BETWEEN 20000 AND 40000
GROUP BY magic_wand_creator
ORDER BY max_deposit_amount DESC
LIMIT 3

-----------------------------------------------------------------------------------------------------

SELECT									----> Age Group
	CASE
		WHEN age BETWEEN 0 AND 10 THEN '[0-10]'
		WHEN age BETWEEN 11 AND 20 THEN '[11-20]'
		WHEN age BETWEEN 21 AND 30 THEN '[21-30]'
		WHEN age BETWEEN 31 AND 40 THEN '[31-40]'
		WHEN age BETWEEN 41 AND 50 THEN '[41-50]'
		WHEN age BETWEEN 51 AND 60 THEN '[51-60]'
		ELSE '[61+]'
	END as age_group,
	COUNT(age)
FROM
	wizard_deposits
GROUP BY age_group
ORDER BY age_group ASC

-----------------------------------------------------------------------------------------------------

SELECT												----> SUM the Employees
	COUNT(CASE department_id WHEN 1 THEN 1 ELSE NULL END) "Engineering",
	COUNT(CASE department_id WHEN 2 THEN 1 ELSE NULL END) "Tool Design",
	COUNT(CASE department_id WHEN 3 THEN 1 ELSE NULL END) "Sales",
	COUNT(CASE department_id WHEN 4 THEN 1 ELSE NULL END) "Marketing",
	COUNT(CASE department_id WHEN 5 THEN 1 ELSE NULL END) "Purchasing",
	COUNT(CASE department_id WHEN 6 THEN 1 ELSE NULL END) "Research and Development",
	COUNT(CASE department_id WHEN 7 THEN 1 ELSE NULL END) "Production"
FROM
	employees

-----------------------------------------------------------------------------------------------------

UPDATE									----> Update Employeesâ€™ Data
	employees
SET
	salary = 
		CASE
			WHEN hire_date < '2015-01-16' THEN salary + 2500
			WHEN hire_date < '2020-03-04' THEN salary + 1500
			ELSE salary
		END,
	job_title = 
		CASE
			WHEN hire_date < '2015-01-16' THEN CONCAT('Senior ', job_title)
			WHEN hire_date < '2020-03-04' THEN CONCAT('Mid-', job_title)
			ELSE job_title
		END


-----------------------------------------------------------------------------------------------------

SELECT										----> Categorizes Salary
	job_title,
	CASE
		WHEN AVG(salary) > 45800 THEN 'Good'
		WHEN AVG(salary) BETWEEN 27500 AND 45800 THEN 'Medium'
		WHEN AVG(salary) < 27500 THEN 'Need Improvement'
	END AS category
FROM
	employees
GROUP BY job_title
ORDER BY category, job_title

-----------------------------------------------------------------------------------------------------

SELECT								----> WHERE Project Status
	project_name,
	CASE
		WHEN start_date IS NULL AND end_date IS NULL THEN 'Ready for development'
		WHEN start_date IS NOT NULL AND end_date IS NULL THEN 'In Progress'
		ELSE 'Done'
	END AS project_status
FROM
	projects
WHERE project_name LIKE '%Mountain%'

-----------------------------------------------------------------------------------------------------

SELECT										---->  HAVING Salary Level
	department_id,
	COUNT(department_id) AS num_employees,
	CASE
		WHEN AVG(salary) > 50000 THEN 'Above average'
		WHEN AVG(salary) <= 50000 THEN 'Below average'
	END
FROM
	employees
GROUP BY department_id
HAVING AVG(salary) > 30000
ORDER BY department_id


-----------------------------------------------------------------------------------------------------

CREATE VIEW view_performance_rating					----> * Nested CASE Conditions
AS
SELECT
	first_name,
	last_name,
	job_title,
	salary,
	department_id,
	CASE
		WHEN salary >= 25000 AND job_title LIKE 'Senior%' THEN 'High-performing Senior'
		WHEN salary >= 25000 AND job_title NOT LIKE 'Senior' THEN 'High-performing Employee'
		ELSE 'Average-performing'
	END AS performance_rating
FROM
	employees

-----------------------------------------------------------------------------------------------------

CREATE TABLE employees_projects(					----> Foreign Key
	id SERIAL PRIMARY KEY,
	employee_id INT REFERENCES employees(id),
	project_id INT REFERENCES projects(id)
)

-----------------------------------------------------------------------------------------------------

SELECT							----> JOIN Tables
	*
FROM
	departments AS d
JOIN employees AS e
	ON 
	d.id = e.department_id















































