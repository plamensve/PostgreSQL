CREATE TABLE IF NOT EXISTS search_results (          -----> 4.11. Full Info for Address
    id SERIAL PRIMARY KEY,
    address_name VARCHAR(50),
    full_name VARCHAR(100),
    level_of_bill VARCHAR(20),
    make VARCHAR(30),
    condition CHAR(1),
    category_name VARCHAR(50)
);

CREATE OR REPLACE PROCEDURE sp_courses_by_address(address_name VARCHAR(100))
AS
    $$
        BEGIN
            TRUNCATE search_results;
            INSERT INTO search_results (
		        address_name,
		        full_name,
		        level_of_bill,
		        make,
		        condition,
		        category_name
	            )
            SELECT
                a.name AS address_name,
                cl.full_name,
                CASE
                    WHEN c.bill <= 20 THEN 'Low'
                    WHEN c.bill <= 30 AND c.bill > 20 THEN 'Medium'
                    ELSE 'High'
                END AS level_of_bill,
                cr.make,
                cr.condition,
                ct.name
            FROM
                addresses AS a
                JOIN courses AS c ON a.id = c.from_address_id
                JOIN clients AS cl ON c.client_id = cl.id
                JOIN cars AS cr ON c.car_id = cr.id
                JOIN categories AS ct ON cr.category_id = ct.id
            WHERE
                a.name = address_name
            ORDER BY
                cr.make, cl.full_name;
        end;
    $$
LANGUAGE plpgsql;

CALL sp_courses_by_address('700 Monterey Avenue')
SELECT * FROM search_results

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fn_courses_by_client(phone_num VARCHAR(20))              -----> Find all Courses by Clientâ€™s Phone Number
RETURNS INT
AS
    $$
        DECLARE
            result INT;
        BEGIN
            SELECT
                COUNT(cr.id) INTO result
            FROM
                clients AS c
            JOIN courses AS cr ON c.id = cr.client_id
            WHERE
                c.phone_number = phone_num
            GROUP BY c.full_name;

             IF result IS NULL THEN
                result := 0;
            END IF;
            RETURN result;

        end;
    $$
LANGUAGE plpgsql;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                            -----> Full Information of Courses
SELECT
    a.name,
    CASE
        WHEN EXTRACT(HOUR FROM c.start) BETWEEN 6 AND 20 THEN 'Day'
        ELSE 'Night'
    END AS day_time,
    c.bill,
    cl.full_name,
    cr.make,
    cr.model,
    ct.name AS category_name

FROM
    addresses AS a
    JOIN courses AS c ON a.id = c.from_address_id
    JOIN clients AS cl ON c.client_id = cl.id
    JOIN cars AS cr ON c.car_id = cr.id
    JOIN categories AS ct ON ct.id = cr.category_id
ORDER BY
    c.id

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT                                                                                          ------> Regular Clients
    c.full_name,
    COUNT(c.id) AS count_of_cars,
    SUM(co.bill) AS total_sum
FROM
    clients AS c
    JOIN courses AS co ON c.id = co.client_id
WHERE
    c.full_name LIKE '_a%'
GROUP BY
    c.full_name
HAVING
    COUNT(c.id) > 1
ORDER BY
    full_name

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT                                                                                            -----> Number of Courses for Each Car
    c.id AS car_id,
    c.make,
    c.mileage,
    COUNT(co.id) AS count_of_courses,
    ROUND(AVG(co.bill), 2) AS average_bill
FROM
    cars AS c
    LEFT JOIN courses AS co ON c.id = co.car_id
GROUP BY
    c.id, c.make, c.mileage
HAVING
    COUNT(co.id) <> 2
ORDER BY
    count_of_courses DESC, c.id;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                        -----> Drivers and Cars
SELECT
    d.first_name,
    d.last_name,
    cs.make,
    cs.model,
    cs.mileage

FROM
    drivers AS d
    JOIN cars_drivers AS cd ON d.id = cd.driver_id
    JOIN cars AS cs ON cd.car_id = cs.id
WHERE
    cs.mileage IS NOT NULL
ORDER BY
    cs.mileage DESC, d.first_name

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT
    make,
    model,
    condition
FROM
    cars
ORDER BY id

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM clients
WHERE
    full_name IN (SELECT
    full_name
FROM
    courses AS c
    RIGHT JOIN clients cl ON c.client_id = cl.id
WHERE
    c.client_id IS NULL
    AND
    LENGTH(cl.full_name) > 3)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE
    cars
SET
    condition = 'C'
WHERE
   ( mileage >= 800000 OR mileage IS NULL)
    AND
    year <= 2010
    AND
    make <> 'Mercedes-Benz';

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO clients (full_name, phone_number)
SELECT 
    first_name || ' ' || last_name AS full_name,
    '(088) 9999' || (id * 2)::text AS phone_number
FROM 
    drivers
WHERE 
    id BETWEEN 10 AND 20;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE addresses(
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL
);

CREATE TABLE categories(
    id SERIAL PRIMARY KEY,
    name VARCHAR(10) NOT NULL
);

CREATE TABLE clients(
  id SERIAL PRIMARY KEY,
  full_name VARCHAR(50) NOT NULL,
  phone_number VARCHAR(20) NOT NULL
);

CREATE TABLE drivers(
  id SERIAL PRIMARY KEY,
  first_name VARCHAR(30) NOT NULL,
  last_name VARCHAR(30) NOT NULL,
  age INT NOT NULL CHECK ( age > 0 ),
  rating NUMERIC(3, 2) DEFAULT 5.5
);

CREATE TABLE cars(
    id SERIAL PRIMARY KEY,
    make VARCHAR(20) NOT NULL,
    model VARCHAR(20),
    year INT NOT NULL DEFAULT 0 CHECK ( year > 0 ),
    mileage INT DEFAULT 0 CHECK ( mileage > 0 ),
    condition CHAR(1) NOT NULL,
    category_id INT NOT NULL,

    CONSTRAINT fk_cars_categories
    FOREIGN KEY (category_id)
    REFERENCES categories(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE courses(
    id SERIAL PRIMARY KEY,
    from_address_id INT NOT NULL,
    start TIMESTAMP NOT NULL,
    bill NUMERIC(10, 2) DEFAULT 10 CHECK ( bill > 0 ),
    car_id INT NOT NULL,
    client_id INT NOT NULL,

    CONSTRAINT fk_courses_addresses
    FOREIGN KEY (from_address_id)
    REFERENCES addresses(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT fk_courses_cars
    FOREIGN KEY (car_id)
    REFERENCES cars(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT fk_courses_clients
    FOREIGN KEY(client_id)
    REFERENCES clients(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);


CREATE TABLE cars_drivers(
    car_id INT NOT NULL ,
    driver_id INT NOT NULL,

    CONSTRAINT fk_cars_drivers_cars
    FOREIGN KEY (car_id)
    REFERENCES cars(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT fk_cars_drivers_drivers
    FOREIGN KEY (driver_id)
    REFERENCES drivers(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

































































































































