CREATE TABLE towns(
    id SERIAL PRIMARY KEY,
    name VARCHAR(45) NOT NULL
);

CREATE TABLE stadiums(
    id SERIAL PRIMARY KEY,
    name VARCHAR(45) NOT NULL,
    capacity INT CHECK ( capacity > 0 ) NOT NULL,
    town_id INT NOT NULL,

    CONSTRAINT fk_stadiums_towns
    FOREIGN KEY (town_id)
    REFERENCES towns(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE teams(
    id SERIAL PRIMARY KEY,
    name VARCHAR(45) NOT NULL,
    established DATE NOT NULL,
    fan_base INT DEFAULT 0 CHECK ( fan_base >= 0 ) NOT NULL,
    stadium_id INT NOT NULL,

    CONSTRAINT fk_teams_stadiums
    FOREIGN KEY (stadium_id)
    REFERENCES stadiums(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE coaches(
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(10) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
    salary NUMERIC(10, 2) DEFAULT 0 CHECK ( salary >= 0 )  NOT NULL,
    coach_level INT DEFAULT 0 CHECK ( coach_level >= 0 ) NOT NULL
);

CREATE TABLE skills_data(
    id INT PRIMARY KEY,
    dribbling INT DEFAULT 0 CHECK ( dribbling >= 0 ),
    pace INT DEFAULT 0 CHECK ( pace >= 0 ),
    passing INT DEFAULT 0 CHECK ( passing >= 0 ),
    shooting INT DEFAULT 0 CHECK ( shooting >= 0 ),
    speed INT DEFAULT 0 CHECK ( speed >= 0 ),
    strength INT DEFAULT 0 CHECK ( strength >= 0 )
);

CREATE TABLE players(
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(10) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
    age INT DEFAULT 0 CHECK ( age >= 0 ) NOT NULL,
    position CHAR(1) NOT NULL,
    salary NUMERIC(10, 2) DEFAULT 0 CHECK ( salary >= 0 ) NOT NULL,
    hire_date TIMESTAMP,
    skills_data_id INT NOT NULL,
    team_id INT,

    CONSTRAINT fk_players_skills_data
    FOREIGN KEY (skills_data_id)
    REFERENCES skills_data(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT fk_players_teams
    FOREIGN KEY (team_id)
    REFERENCES teams(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE players_coaches(
    player_id INT,
    coach_id INT,

    CONSTRAINT fk_players_coaches_players
    FOREIGN KEY (player_id)
    REFERENCES players(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT fk_players_coaches_coaches
    FOREIGN KEY (coach_id)
    REFERENCES coaches(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

-----------------------------------------------------------------------------------------------------------------------------------

INSERT INTO coaches (first_name, last_name, salary, coach_level)
SELECT 
    first_name, 
    last_name, 
    salary * 2, 
    LENGTH(first_name)
FROM 
    players
WHERE 
    hire_date < '2013-12-13 07:18:46';

--------------------------------------------------------------------------------------------------------------------------------------

UPDATE coaches
SET salary = salary * coach_level
WHERE
    first_name LIKE 'C%'
    AND EXISTS (
        SELECT
        1
        FROM
            players_coaches AS pc
        WHERE
            coaches.id = pc.coach_id
            AND pc.player_id IS NOT NULL
    );


-----------------------------------------------------------------------------------------------------------------------------------

DELETE 
FROM
    players
WHERE
    hire_date < '2013-12-13 07:18:46';

-----------------------------------------------------------------------------------------------------------------------------------

SELECT
    CONCAT(first_name, ' ', last_name) AS full_name,
    age,
    hire_date
FROM
    players
WHERE
    first_name LIKE 'M%'
ORDER BY
    age DESC, full_name

-----------------------------------------------------------------------------------------------------------------------------------

select
    p.id,
    CONCAT(p.first_name, ' ', p.last_name) AS full_name,
    p.age,
    p.position,
    p.salary,
    sd.pace,
    sd.shooting
from
    players AS p
    JOIN skills_data AS sd ON p.skills_data_id = sd.id
where
    position = 'A'
    and
    hire_date IS NULL
    AND
    sd.pace + sd.shooting > 130

-----------------------------------------------------------------------------------------------------------------------------------

SELECT
   t.id AS team_id,
   t.name AS team_name,
   COUNT(p.team_id) AS player_count,
   t.fan_base
FROM
    teams AS t
    LEFT JOIN players AS p ON t.id = p.team_id
WHERE
    fan_base > 30000
GROUP BY
    t.id, t.name, t.fan_base
ORDER BY
    player_count DESC, t.fan_base DESC;

-----------------------------------------------------------------------------------------------------------------------------------

SELECT
    CONCAT(c.first_name, ' ', c.last_name) AS coach_full_name,
    CONCAT(p.first_name, ' ', p.last_name) AS player_full_name,
    t.name AS team_name,
    sd.passing,
    sd.shooting,
    sd.speed
FROM
    coaches AS c
    JOIN players_coaches AS pc ON c.id = pc.coach_id
    JOIN players AS p ON pc.player_id = p.id
    JOIN teams AS t ON p.team_id = t.id
    JOIN skills_data AS sd ON p.skills_data_id = sd.id
ORDER BY
    coach_full_name, player_full_name DESC;


-----------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fn_stadium_team_name(
    stadium_name VARCHAR(30)
)
RETURNS TABLE (
    team_name VARCHAR(45)
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        tm.name
    FROM
        teams AS tm
        JOIN stadiums AS s ON tm.stadium_id = s.id
    WHERE
        s.name = stadium_name
    ORDER BY
        tm.name;
END;
    $$
LANGUAGE plpgsql;

-----------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE sp_players_team_name(IN player_name VARCHAR(50), OUT team_name VARCHAR(45))
AS
    $$
        BEGIN
            SELECT INTO team_name
                CASE
                    WHEN  p.team_id IS NOT NULL THEN t.name
                    WHEN  p.team_id IS NULL THEN 'The player currently has no team'
                END
            FROM
                players AS p
                LEFT JOIN teams AS t ON p.team_id = t.id
            WHERE
            CONCAT(p.first_name, ' ', p.last_name) = player_name;
        end;
    $$
LANGUAGE plpgsql;













































































































































































































