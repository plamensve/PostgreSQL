CREATE TABLE categories(
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

CREATE TABLE addresses(
    id SERIAL PRIMARY KEY,
    street_name VARCHAR(100) NOT NULL,
    street_number INT NOT NULL CHECK ( street_number > 0 ),
    town VARCHAR(30) NOT NULL,
    country VARCHAR(50) NOT NULL,
    zip_code INT NOT NULL CHECK ( zip_code > 0 )
);

CREATE TABLE publishers(
    id SERIAL PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    address_id INT NOT NULL,
    website VARCHAR(40),
    phone VARCHAR(20),

    CONSTRAINT fk_publishers_addresses
    FOREIGN KEY (address_id)
    REFERENCES addresses(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE players_ranges(
    id SERIAL PRIMARY KEY,
    min_players INT NOT NULL CHECK ( min_players > 0 ),
    max_players INT NOT NULL CHECK ( max_players > 0 )
);

CREATE TABLE creators(
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    email VARCHAR(30) NOT NULL
);

CREATE TABLE board_games(
    id SERIAL PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    release_year INT NOT NULL CHECK ( release_year > 0 ),
    rating NUMERIC(4, 2) NOT NULL,
    category_id INT NOT NULL,
    publisher_id INT NOT NULL,
    players_range_id INT NOT NULL,

    CONSTRAINT fk_board_games_categories
    FOREIGN KEY (category_id)
    REFERENCES categories(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT fk_board_games_publishers
    FOREIGN KEY (publisher_id)
    REFERENCES publishers(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT fk_board_games_players_ranges
    FOREIGN KEY (players_range_id)
    REFERENCES players_ranges(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE creators_board_games(
    creator_id INT NOT NULL,
    board_game_id INT NOT NULL,

    CONSTRAINT fk_creators_board_games_creators
    FOREIGN KEY (creator_id)
    REFERENCES creators(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE,

    CONSTRAINT fk_creators_board_games_board_games
    FOREIGN KEY (board_game_id)
    REFERENCES board_games(id)

    ON DELETE CASCADE
    ON UPDATE CASCADE
);

------------------------------------------------------------------------------------------------------------------------------------------------------

INSERT INTO board_games(name, release_year, rating, category_id, publisher_id, players_range_id)
VALUES
    ('Deep Blue', 2019, 5.67, 1, 15, 7),
    ('Paris', 2016, 9.78, 7, 1, 5),
    ('Catan: Starfarers', 2021, 9.87, 7, 13, 6),
    ('Bleeding Kansas', 2020, 3.25, 3, 7, 4),
    ('One Small Step', 2019, 5.75, 5, 9, 2);

INSERT INTO publishers(name, address_id, website, phone)
VALUES
    ('Agman Games', 5, 'www.agmangames.com', '+16546135542'),
    ('Amethyst Games', 7, 'www.amethystgames.com', '+15558889992'),
    ('BattleBooks', 13, 'www.battlebooks.com', '+12345678907');


------------------------------------------------------------------------------------------------------------------------------------------------------

update players_ranges
set
    max_players = max_players + 1
where
    min_players = 2 and max_players = 2;

update board_games
set name = concat(name, ' ', 'V2')
where
    release_year >= 2020;


------------------------------------------------------------------------------------------------------------------------------------------------------

DELETE FROM board_games
WHERE publisher_id IN (
    SELECT id
    FROM publishers
    WHERE address_id IN (
        SELECT id
        FROM addresses
        WHERE town LIKE 'L%'
    )
);

delete from publishers
where address_id = (select id from addresses where town LIKE 'L%');

delete from addresses
where
    town LIKE 'L%';

------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT
    name,
    rating
FROM
    board_games
ORDER BY
    release_year, name DESC

------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT
    bg.id,
    bg.name,
    bg.release_year,
    c.name AS category_name
FROM
    board_games AS bg
    JOIN categories AS c ON bg.category_id = c.id
WHERE
    c.name = 'Strategy Games' OR c.name = 'Wargames'
ORDER BY
    bg.release_year DESC;

------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT
    c.id,
    CONCAT(c.first_name, ' ', c.last_name) AS creator_name,
    c.email
FROM
    creators AS c
    LEFT JOIN creators_board_games AS cbg ON c.id = cbg.creator_id
WHERE
    board_game_id IS NULL



------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT
    b.name,
    b.rating,
    c.name AS category_name
FROM
    board_games AS b
    JOIN players_ranges AS pg ON b.players_range_id = pg.id
    JOIN categories AS c ON b.category_id = c.id
WHERE
    b.rating > 7.00 AND b.name LIKE '%A%'
    OR
    b.rating > 7.50 AND pg.min_players >= 2 AND pg.max_players <= 5
ORDER BY
    b.name, b.rating DESC
LIMIT 5;

------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT
    CONCAT(c.first_name, ' ', c.last_name) AS full_name,
    c.email,
    MAX(bg.rating) AS rating
FROM
    creators AS c
    JOIN creators_board_games AS cbg ON c.id = cbg.creator_id
    JOIN board_games AS bg ON cbg.board_game_id = bg.id
WHERE
   c.email LIKE '%.com'
GROUP BY
    full_name, c.email
ORDER BY
    full_name

------------------------------------------------------------------------------------------------------------------------------------------------------

select
    c.last_name,
    CEIL(AVG(bg.rating)) AS average_rating,
    p.name AS publisher_name
from
    creators AS c
    JOIN creators_board_games AS cbg ON c.id = cbg.creator_id
    JOIN board_games AS bg ON cbg.board_game_id = bg.id
    JOIN publishers AS p ON bg.publisher_id = p.id
WHERE
    p.name = 'Stonemaier Games'
GROUP BY
    c.last_name, p.name
ORDER BY
    average_rating DESC;


------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fn_creator_with_board_games(
    fn VARCHAR(30)
)
RETURNS INT
AS
    $$
        DECLARE
            result INT;
        BEGIN
            SELECT INTO result
                COUNT(*)
            FROM
                board_games AS bg
                JOIN creators_board_games AS cbg ON bg.id = cbg.board_game_id
                JOIN creators AS c ON cbg.creator_id = c.id
            WHERE
                c.first_name = fn;
            RETURN result;
        END;
    $$
LANGUAGE plpgsql;


------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE search_results (
	"id" SERIAL PRIMARY KEY,
    "name" VARCHAR(50),
    release_year INT,
    rating FLOAT,
    category_name VARCHAR(50),
    publisher_name VARCHAR(50),
    min_players VARCHAR(50),
    max_players VARCHAR(50)
);

CREATE OR REPLACE PROCEDURE usp_search_by_category(
	IN category VARCHAR(50)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Clear previous results from the table
    TRUNCATE TABLE search_results;
    
    -- Insert new results into the table
    INSERT INTO search_results (
		"name", 
		release_year, 
		rating, 
		category_name, 
		publisher_name, 
		min_players, 
		max_players
	)
    SELECT 
        bg."name",
        bg.release_year,
        bg.rating,
        c."name" AS category_name,
        p."name" AS publisher_name,
        CONCAT(pr.min_players, ' people'),
        CONCAT(pr.max_players, ' people')
    FROM 
		board_games AS bg
    JOIN 
		publishers AS p 
		ON 
		bg.publisher_id = p.id
    JOIN 
		categories AS c 
		ON 
		bg.category_id = c."id"
    JOIN 
		players_ranges AS pr 
		ON 
		bg.players_range_id = pr."id"
    WHERE 
		c."name" = category
    ORDER BY 
		publisher_name, 
		release_year DESC;
END;
$$;
































































































































