CREATE OR REPLACE FUNCTION fn_count_employees_by_town(town_name VARCHAR(20))              -----> Count Employees by Town
RETURNS INT AS
    $$
        DECLARE
            town_count INT;
        BEGIN
            SELECT INTO town_count
                COUNT(*)
            FROM
                employees AS e
                JOIN addresses AS a ON e.address_id = a.address_id
                JOIN towns AS t ON a.town_id = t.town_id
            WHERE
                t.name = town_name;
            RETURN town_count;
        end;
    $$
LANGUAGE plpgsql;

SELECT fn_count_employees_by_town('Sofia') AS count

-----------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE sp_increase_salaries(department_name VARCHAR(50))                -----> Employees Promotion
LANGUAGE plpgsql
AS
    $$
        BEGIN
            UPDATE employees AS e
            SET salary = salary * 1.05
            WHERE
                e.department_id = (
                SELECT department_id FROM departments WHERE name = department_name);
        end;
    $$
;

CALL sp_increase_salaries('Finance')

-----------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE sp_increase_salary_by_id(id INT)            -----> Employees Promotion By ID
LANGUAGE plpgsql
AS
    $$
        BEGIN
            if (SELECT salary FROM employees WHERE employee_id = id) IS NULL
                THEN
                RETURN;

            end if;
                UPDATE
                    employees
                SET
                    salary = salary * 1.05
                WHERE
                    employee_id = id;
        end;
    $$
;

-----------------------------------------------------------------------------------------------------------------------

CREATE TABLE deleted_employees(
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(20),
    last_name VARCHAR(20),
    middle_name VARCHAR(20),
    job_title VARCHAR(50),
    department_id INT,
    salary NUMERIC(19, 4)
);

CREATE OR REPLACE FUNCTION insert_employee()
RETURNS TRIGGER
AS
    $$
        BEGIN
            INSERT INTO deleted_employees(
                first_name,
                last_name,
                middle_name,
                job_title,
                department_id,
                salary
            )
            VALUES(
                   old.first_name,
                   old.last_name,
                   old.middle_name,
                   old.job_title,
                   old.department_id,
                   old.salary
                  );
            RETURN new;
        end;
    $$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER fired_employee
AFTER DELETE ON employees
FOR EACH ROW
EXECUTE PROCEDURE insert_employee();






















































































































