CREATE OR REPLACE FUNCTION fn_full_name(first_name VARCHAR, last_name VARCHAR)                          -----> User-defined Function Full Name
RETURNS VARCHAR AS
    $$
        BEGIN
            RETURN INITCAP(CONCAT(first_name, ' ', last_name));
        end;
    $$
LANGUAGE plpgsql;

-------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fn_calculate_future_value(                                                ----->  User-defined Function Future Value

    initial_sum DECIMAL,
    yearly_interest_rate DECIMAL,
    number_of_years INT)
RETURNS DECIMAL AS
    $$
        DECLARE
            future_value DECIMAL;
        BEGIN
            future_value := TRUNC(initial_sum * (POWER(1 + yearly_interest_rate, number_of_years)), 4);
            RETURN future_value;
        end;
    $$
LANGUAGE plpgsql;


SELECT fn_calculate_future_value(1000, 0.1, 5)


-------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fn_is_word_comprised(                                            -----> User-defined Function Is Word Comprised
    set_of_letters VARCHAR(50),
    word VARCHAR(50)
)
RETURNS BOOLEAN
AS
    $$
        BEGIN
            RETURN TRIM(LOWER(word), LOWER(set_of_letters)) = '';
        end;
    $$
LANGUAGE plpgsql;

-------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fn_is_game_over(                                                            -----> Game Over
    is_game_over BOOLEAN
)
RETURNS TABLE (
    name VARCHAR(50),
    game_type_id INT,
    is_finished BOOLEAN
              )
AS
    $$
        BEGIN
            RETURN QUERY
            SELECT
                g.name, g.game_type_id, g.is_finished
            FROM games AS g
            WHERE g.is_finished = is_game_over;

        end;
    $$
LANGUAGE plpgsql;

-------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fn_difficulty_level(level INT)                                -----> Difficulty Level
RETURNS VARCHAR(50)
AS
$$
DECLARE
    difficulty_level VARCHAR(50);
BEGIN
    IF level <= 40 THEN
        difficulty_level := 'Normal Difficulty';
    ELSIF level BETWEEN 41 AND 60 THEN
        difficulty_level := 'Nightmare Difficulty';
    ELSE
        difficulty_level := 'Hell Difficulty';
    END IF;
    RETURN difficulty_level;
END;
$$
LANGUAGE plpgsql;


SELECT
    user_id,
    level,
    cash,
    fn_difficulty_level(level) AS difficulty_level
FROM
    users_games
ORDER BY
    user_id;

-------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION fn_cash_in_users_games(                                                    -----> Cash in User Games Odd Rows
    game_name VARCHAR(50)
)
RETURNS TABLE(
    total_cash NUMERIC
             )
AS
    $$
        BEGIN
            RETURN QUERY
            WITH ranked_games AS (
                SELECT
                    cash,
			        ROW_NUMBER() OVER (ORDER BY cash DESC) AS row_num
                FROM
                    users_games AS ug
                JOIN
                    games AS g
                ON
                    ug.game_id = g.id
                WHERE
                    g.name = game_name
            )
            SELECT
		        ROUND(SUM(cash), 2) AS total_cash
	        FROM
		        ranked_games AS rg
	        WHERE
		        rg.row_num % 2 <> 0;
        end;
    $$
LANGUAGE plpgsql;

-------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE sp_retrieving_holders_with_balance_higher_than(                        -----> Retrieving Account Holders**
    searched_balance NUMERIC
)
AS
    $$
        DECLARE
	    holder_info RECORD;

        BEGIN
            FOR holder_info IN
                SELECT
                    CONCAT(ah.first_name, ' ', ah.last_name) AS full_name,
                    SUM(a.balance) AS total_balance
                FROM
                    account_holders AS ah
                    JOIN accounts AS a ON ah.id = a.account_holder_id
                GROUP BY
                    full_name
                HAVING
                    SUM(a.balance) > searched_balance
                ORDER BY
                    full_name
            LOOP
		        RAISE NOTICE '% - %.', holder_info.full_name, holder_info.total_balance;
	        END LOOP;
        end;
    $$
LANGUAGE plpgsql;

CALL sp_retrieving_holders_with_balance_higher_than(200000);

-------------------------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE sp_deposit_money(
    account_id INT,
    money_amount NUMERIC(4)
)
AS
    $$
        BEGIN
            UPDATE accounts
            SET balance = balance + money_amount
            WHERE
                account_id = accounts.id;
        end;
    $$
LANGUAGE plpgsql;


-------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE sp_withdraw_money(							-----> Withdraw Money
    account_id INT,
    money_amount NUMERIC(4)
)
AS
    $$
        DECLARE
        money_for_withdraw NUMERIC(4);
        BEGIN
            IF money_amount > (SELECT balance FROM accounts WHERE account_id = id) THEN
                RAISE NOTICE 'Insufficient balance to withdraw %', money_amount;
            ELSIF
                money_amount <= (SELECT balance FROM accounts WHERE account_id = id) THEN
                UPDATE accounts AS a
                SET balance = balance - money_amount
                WHERE
                    a.id = account_id;
            END IF;
        end;
    $$
LANGUAGE plpgsql;

CALL sp_withdraw_money(1, 300)

-------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE sp_transfer_money(							-----> Money Transfer
    sender_id INT,
    receiver_id INT,
    amount NUMERIC(4)
)
AS
    $$
        DECLARE
            current_balance NUMERIC;
        BEGIN
            CALL sp_withdraw_money(sender_id, amount);
            CALL sp_deposit_money(receiver_id, amount);

            current_balance := (SELECT balance FROM accounts WHERE sender_id = accounts.id);
            IF current_balance < 0 THEN
                ROLLBACK;
            END IF;

        end;
    $$
LANGUAGE plpgsql;


-------------------------------------------------------------------------------------------------------------------------------------------




















































































































































































































